import { Client, Message, ContactId } from '@open-wa/wa-automate';
import { BaseCommand } from '@/abstracts';
import { SomenteGrupo } from '@/decorators';
import {
  obterJogosAbertosParaPalpite,
  obterJogosPendentesDeResultado,
  JogoBolao,
} from '@/modulos';
import dayjs from 'dayjs';
import 'dayjs/locale/pt-br';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.locale('pt-br');

const FUSO_HORARIO_EXIBICAO = 'America/Sao_Paulo';

/**
 * @class ComandoVerJogosBolao
 * @classdesc Comando para mostrar a lista de jogos do bol√£o: abertos para palpites e, para admins, pendentes de resultado.
 * @extends BaseCommand
 */
export class ComandoVerJogosBolao extends BaseCommand {
  /**
   * @static
   * @property {string} nome - O nome do comando.
   */
  static nome = 'boloes';
  /**
   * @static
   * @property {string} categoria - A categoria do comando.
   */
  static categoria = 'Bol√£o';

  /**
   * @constructor
   * @description Cria uma inst√¢ncia do ComandoVerJogosBolao.
   */
  constructor() {
    super();
    this.descricao =
      'Mostra a lista de jogos do bol√£o: abertos para palpites e, para admins, pendentes de resultado.';
    this.guia = `Use "!${ComandoVerJogosBolao.nome}" para ver todas as partidas dispon√≠veis para palpitar neste grupo e seus respectivos IDs. Admins tamb√©m ver√£o jogos que precisam de atualiza√ß√£o de resultado.`;
  }

  /**
   * @async
   * @method executar
   * @description Executa o comando para listar os jogos do bol√£o.
   * Administradores ver√£o uma se√ß√£o adicional com jogos pendentes de resultado.
   * @param {Client} client - Inst√¢ncia do cliente WA.
   * @param {Message} message - Objeto da mensagem original.
   * @param {string[]} [_args] - Argumentos passados (n√£o utilizados neste comando).
   * @returns {Promise<void>}
   */
  @SomenteGrupo
  async executar(
    client: Client,
    message: Message,
    _args?: string[]
  ): Promise<void> {
    const idGrupo = message.chatId;
    let isAdmin = false;

    if (message.chat.groupMetadata && message.chat.groupMetadata.participants) {
      const senderParticipant = message.chat.groupMetadata.participants.find(
        (p) => {
          const participantId = (
            typeof p.id === 'string' ? p.id : p.id._serialized
          ) as ContactId;
          return participantId === message.sender.id;
        }
      );
      isAdmin = senderParticipant?.isAdmin || false;
    }

    let resposta = '';

    try {
      if (isAdmin) {
        const jogosPendentes = await obterJogosPendentesDeResultado(idGrupo);
        if (jogosPendentes && jogosPendentes.length > 0) {
          resposta += `‚ö†Ô∏è *Jogos Aguardando Resultado (Admin):*\n_(Hor√°rios de Bras√≠lia)_\n\n`;
          jogosPendentes.forEach((jogo) => {
            const dataJogoFormatada = dayjs(jogo.dataJogo)
              .tz(FUSO_HORARIO_EXIBICAO)
              .format('DD/MM [√†s] HH:mm');
            resposta += `------------------------------------\n`;
            resposta += `*ID do Jogo:* \`${jogo.idJogo}\`\n`;
            resposta += `*${jogo.timeCasa} vs ${jogo.timeFora}*\n`;
            if (jogo.campeonato) {
              resposta += `üèÜ *${jogo.campeonato}*\n`;
            }
            resposta += `üóìÔ∏è ${dataJogoFormatada}\n`;
            resposta += `‚úçÔ∏è *A√ß√£o:* para finalizar use:\n \`!bolaoresultado ${jogo.idJogo} <Casa>x<Fora>\`\n`;
          });
          resposta += `------------------------------------\n\n`;
        }
      }

      const jogosAbertos: JogoBolao[] =
        await obterJogosAbertosParaPalpite(idGrupo);

      if (jogosAbertos && jogosAbertos.length > 0) {
        resposta += `üèÜ *Jogos Abertos para Palpite no Bol√£o do Grupo* üèÜ\n_(Hor√°rios de Bras√≠lia)_\n\n`;
        jogosAbertos.forEach((jogo) => {
          const dataLimitePalpite = dayjs(jogo.dataLimitePalpite)
            .tz(FUSO_HORARIO_EXIBICAO)
            .format('DD/MM [√†s] HH:mm');
          const dataJogoFormatada = dayjs(jogo.dataJogo)
            .tz(FUSO_HORARIO_EXIBICAO)
            .format('DD/MM [√†s] HH:mm');

          resposta += `------------------------------------\n`;
          resposta += `*ID do Jogo:* \`${jogo.idJogo}\`\n`;
          resposta += `‚öΩ ${jogo.timeCasa} vs ${jogo.timeFora}\n`;
          if (jogo.campeonato) {
            resposta += `üèÜ ${jogo.campeonato}\n`;
          }
          resposta += `üóìÔ∏è ${dataJogoFormatada}\n`;
          resposta += `üîí *Palpites at√©:* ${dataLimitePalpite}\n`;
          resposta += `üí¨ *Como palpitar:*\n \`!palpitar ${jogo.idJogo} <Casa>x<Fora>\`\n`;
        });
        resposta += `------------------------------------\n`;
      }

      if (resposta.trim() === '') {
        if (isAdmin) {
          resposta =
            'üëç Nenhum jogo pendente de resultado e nenhum jogo aberto para palpites no momento.';
        } else {
          resposta =
            'üòî Nenhum jogo aberto para palpites neste grupo no momento. Pe√ßa a um admin para adicionar jogos!';
        }
      }

      await this.responder(client, message, resposta.trim());
    } catch (error) {
      console.error(`Erro no comando ${ComandoVerJogosBolao.nome}:`, error);
      await this.responder(
        client,
        message,
        '‚ùå Ops! Ocorreu um erro ao buscar os jogos do bol√£o. Tente novamente mais tarde.'
      );
    }
  }
}
