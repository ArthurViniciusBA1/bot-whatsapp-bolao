import { Client, Message } from '@open-wa/wa-automate';
import { BaseCommand } from '@/abstracts';
import { SomenteGrupo } from '@/decorators';
import { obterRankingGrupo, UsuarioRanking } from '@/modulos';
import { prefixo } from '@/dadosBot';

/**
 * @class ComandoRankingBolao
 * @classdesc Comando para mostrar a classifica√ß√£o atual de todos os participantes do bol√£o no grupo.
 * @extends BaseCommand
 */
export class ComandoRankingBolao extends BaseCommand {
  /**
   * @static
   * @property {string} nome - O nome do comando.
   */
  static nome = 'rankingbolao';
  /**
   * @static
   * @property {string} categoria - A categoria do comando.
   */
  static categoria = 'Bol√£o';

  /**
   * @constructor
   * @description Cria uma inst√¢ncia do ComandoRankingBolao.
   */
  constructor() {
    super();
    this.descricao =
      'Mostra a classifica√ß√£o atual de TODOS os participantes do bol√£o no grupo.';
    this.guia = `Use !${ComandoRankingBolao.nome} para ver quem est√° na lideran√ßa e sua pontua√ß√£o, incluindo todos os participantes.`;
  }

  /**
   * @async
   * @method executar
   * @description Executa o comando para exibir o ranking completo do bol√£o do grupo.
   * @param {Client} client - Inst√¢ncia do cliente WA.
   * @param {Message} message - Objeto da mensagem original.
   * @param {string[]} [_args] - Argumentos passados (n√£o utilizados neste comando).
   * @returns {Promise<void>}
   */
  @SomenteGrupo
  async executar(
    client: Client,
    message: Message,
    _args?: string[]
  ): Promise<void> {
    const idGrupo = message.chatId;

    try {
      const ranking: UsuarioRanking[] = await obterRankingGrupo(idGrupo);

      if (!ranking || ranking.length === 0) {
        await this.responderMarcando(
          client,
          message,
          'üìä O ranking deste grupo ainda est√° vazio. Adicione jogos e palpites para come√ßar!'
        );
        return;
      }

      let resposta = `üèÜ *Ranking do Bol√£o do Grupo* üèÜ\n\n`;

      ranking.forEach((usuario, index) => {
        let posicaoDisplay = '';
        if (index === 0) posicaoDisplay = 'ü•á';
        else if (index === 1) posicaoDisplay = 'ü•à';
        else if (index === 2) posicaoDisplay = 'ü•â';
        else posicaoDisplay = `${index + 1}.`;

        if (index > 0) {
          resposta += `\n`;
        }
        resposta += `${posicaoDisplay} ${usuario.nomeUsuarioDisplay} - ${usuario.pontosTotais} ponto(s)`;
        if (index < ranking.length - 1) {
          resposta += `\n`;
        }
      });

      if (resposta.trim() === `üèÜ *Ranking do Bol√£o do Grupo* üèÜ`) {
        resposta += `\nNingu√©m pontuou ainda! ü§∑‚Äç‚ôÇÔ∏è`;
      }

      await this.responder(client, message, resposta.trim());
    } catch (error) {
      console.error(
        `Erro no comando ${prefixo}${ComandoRankingBolao.nome}:`,
        error
      );
      await this.responderMarcando(
        client,
        message,
        '‚ùå Ops! Ocorreu um erro ao buscar o ranking do bol√£o. Tente novamente mais tarde.'
      );
    }
  }
}
